DROP DATABASE IF EXISTS cstore_db;
CREATE DATABASE cstore_db;
USE cstore_db;

CREATE TABLE IF NOT EXISTS account (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  first_name NVARCHAR(32),
  last_name NVARCHAR(32),
  hashed_password NVARCHAR(256) NOT NULL,
  email NVARCHAR(64) UNIQUE NOT NULL,
  display_name NVARCHAR(32) NOT NULL,
  img_src NVARCHAR(128),
  fb_link NVARCHAR(128),
  twitter_link NVARCHAR(128),
  google_plus_link NVARCHAR(128),
  country NVARCHAR(32),
  city NVARCHAR(32),
  about_me NVARCHAR(1024),
  type ENUM ('ADMIN', 'USER', 'GUEST')
  is_banned ENUM ('0', '1')
);

CREATE TABLE IF NOT EXISTS post (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  account_ID INT,
  img_src NVARCHAR(128),
  youtube_link NVARCHAR(1024),
  title NVARCHAR(64),
  description NVARCHAR(1024),
  post_time DATETIME,

  FOREIGN KEY (account_ID) REFERENCES accounts(ID)
);

CREATE TABLE IF NOT EXISTS follow (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  follower_ID INT,
  following_ID INT,

  FOREIGN KEY (follower_ID) REFERENCES accounts(ID),
  FOREIGN KEY (following_ID) REFERENCES accounts(ID)
);

CREATE TABLE IF NOT EXISTS tag (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tag NVARCHAR(32)
);

CREATE TABLE IF NOT EXISTS posts_tag (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_ID INT,
  tag_ID INT,

  FOREIGN KEY (post_ID) REFERENCES posts(ID),
  FOREIGN KEY (tag_ID) REFERENCES tags(ID)
);

CREATE TABLE IF NOT EXISTS plus (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_ID INT,
  account_ID INT,

  FOREIGN KEY (post_ID) REFERENCES posts(ID),
  FOREIGN KEY (account_ID) REFERENCES accounts(ID)
);

CREATE TABLE IF NOT EXISTS minus (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_ID INT,
  account_ID INT,

  FOREIGN KEY (post_ID) REFERENCES posts(ID),
  FOREIGN KEY (account_ID) REFERENCES accounts(ID)
);

CREATE TABLE IF NOT EXISTS comment (
  ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_ID INT,
  account_ID INT,
  comment_text NVARCHAR(1024),
  add_time DATETIME,

  FOREIGN KEY (post_ID) REFERENCES posts(ID),
  FOREIGN KEY (account_ID) REFERENCES accounts(ID)
)